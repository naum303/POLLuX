package de.mn.pollux.views;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

import de.mn.pollux.PolluxUI;
import de.mn.pollux.entities.Poll;
import de.mn.pollux.model.PolluxModel;
import de.mn.pollux.presenter.PollsOverviewPresenter;
import de.mn.vaf.util.Logger;

public class PollsOverviewView extends CustomComponent 
	implements PollsOverviewPresenter.Display,
				Button.ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout buttonLayout;
	@AutoGenerated
	private Button buttonDelete;
	@AutoGenerated
	private Button buttonGoto;
	@AutoGenerated
	private Button buttonNew;
	@AutoGenerated
	private Table table_1;
	
	// TODO in Oberklasse verschieben. Muss es eine geben?
	private PollsOverviewPresenter presenter;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PollsOverviewView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	public PollsOverviewPresenter getPresenter() {
		return presenter;
	}
	
	public void setPresenter(PollsOverviewPresenter presenter) {
		this.presenter = presenter;
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
//		mainLayout.setWidth("100%");
//		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
//		setWidth("100.0%");
//		setHeight("100.0%");
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("-1px");
//		table_1.setHeight("-1px");
		table_1.setSelectable(true);
		mainLayout.addComponent(table_1);
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
//		buttonLayout.setWidth("100.0%");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		
		// buttonNew
		buttonNew = new Button();
		buttonNew.setCaption("New");
		buttonNew.setImmediate(false);
		buttonNew.setWidth("-1px");
		buttonNew.setHeight("-1px");
		buttonNew.addClickListener(this);
		buttonLayout.addComponent(buttonNew);
		
		// buttonGoto
		buttonGoto = new Button();
		buttonGoto.setCaption("Goto");
		buttonGoto.setImmediate(false);
		buttonGoto.setWidth("-1px");
		buttonGoto.setHeight("-1px");
		buttonGoto.addClickListener(this);
		buttonLayout.addComponent(buttonGoto);
		
		// buttonDelete
		buttonDelete = new Button();
		buttonDelete.setCaption("Delete");
		buttonDelete.setImmediate(false);
		buttonDelete.setWidth("-1px");
		buttonDelete.setHeight("-1px");
		buttonDelete.addClickListener(this);
		buttonLayout.addComponent(buttonDelete);
		
		return buttonLayout;
	}
	
	public void updatePollsTable(List<Poll> pollList) {
				
		try {
						
			PollsOverviewBeanItemContainer container = new PollsOverviewBeanItemContainer();
			container.addAll(pollList);
			
			table_1.setContainerDataSource(container);

		} catch (InstantiationException e) {
			Logger.log(e);
		} catch (IllegalAccessException e) {
			Logger.log(e);
		}
		
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource().equals(buttonGoto)) {
			getPresenter().handleGotoPollEvent();
		} 
		else if (event.getSource().equals(buttonNew)) {
			getPresenter().handleNewPollEvent();
		}
		else if (event.getSource().equals(buttonDelete)) {
			getPresenter().handleDeletePollEvent();
		}
		
	}


	@Override
	public Poll getSelectedPoll() {
		return (Poll) table_1.getValue();
	}

	
}
